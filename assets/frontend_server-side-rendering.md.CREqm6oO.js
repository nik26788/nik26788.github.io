import{_ as a,c as e,o as t,a1 as o}from"./chunks/framework.CYKEwMIE.js";const u=JSON.parse('{"title":"服务端渲染","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"frontend/server-side-rendering.md","filePath":"frontend/server-side-rendering.md"}'),i={name:"frontend/server-side-rendering.md"};function l(n,r,s,d,h,c){return t(),e("div",null,r[0]||(r[0]=[o('<h1 id="服务端渲染" tabindex="-1">服务端渲染 <a class="header-anchor" href="#服务端渲染" aria-label="Permalink to &quot;服务端渲染&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>服务端渲染（Server-Side Rendering, SSR）是一种将网页内容在服务器端生成并发送到客户端到技术。与客户端渲染（Client-Side Rendering, CSR）不同，服务端渲染过程是通过服务器来生成 HTML 页面，再将已生成端页面返回给用户端浏览器。浏览器直接显示这个页面，而不是先加载一个空的 HTML 页面和 javascript 文件，然后由 javascript 在客户端渲染页面。</p></div><h3 id="服务端渲染的基本流程" tabindex="-1">服务端渲染的基本流程 <a class="header-anchor" href="#服务端渲染的基本流程" aria-label="Permalink to &quot;服务端渲染的基本流程&quot;">​</a></h3><ol><li><strong>用户请求</strong>：用户请求访问某个页面</li><li><strong>服务器处理</strong>: 服务器收到请求后，根据请求的内容生成完整的 HTML 页面。通常涉及数据库查询、数据处理等过程。</li><li><strong>返回 HTML</strong>: 服务器将生成的 HTML 页面返回给浏览器。</li><li><strong>浏览器显示</strong>: 浏览器直接渲染接收到的 HTML 页面并显示给用户。</li></ol><h3 id="服务端渲染的优缺点" tabindex="-1">服务端渲染的优缺点： <a class="header-anchor" href="#服务端渲染的优缺点" aria-label="Permalink to &quot;服务端渲染的优缺点：&quot;">​</a></h3><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ol><li><strong>更快的首屏加载时间</strong>: 因为服务器直接返回完整的 HTML 页面，浏览器可以更快的渲染页面，用户可以更快的看到内容。</li><li><strong>有利于 SEO(搜索引擎优化)</strong>: 搜索引擎可以直接抓取到页面的内容，不需要依赖 javascript 渲染。对于搜索引擎优化极为重要，尤其是对依赖搜索引擎流量的网站。</li><li><strong>更好的性能表现</strong>: 对于一些性能低的设备或网络条件差的环境，SSR 可以减轻客户端的负担。</li></ol><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ol><li><strong>服务器负担重</strong>: 每次用户请求都会让服务器生成完整的页面，增加了服务器的处理压力。</li><li><strong>交互性差</strong>: 虽然页面会快速加载，但交互性相对较弱，因为 javascript 仍需要加载并执行才能实现动态的交互功能。</li><li><strong>频繁的页面刷新</strong>: 每次用户访问新的页面时，都会从服务器请求新的页面，导致用户体验上的跳转和刷新。</li></ol><h3 id="服务端渲染的使用场景" tabindex="-1">服务端渲染的使用场景 <a class="header-anchor" href="#服务端渲染的使用场景" aria-label="Permalink to &quot;服务端渲染的使用场景&quot;">​</a></h3><ol><li><strong>SEO 要求高的内容网站</strong>: 如博客、新闻网站、电子商务网站等，需要确保搜索引擎能够抓取页面内容，提升网站的搜索排名。</li><li><strong>需要快速首屏渲染的应用</strong>: 例如，静态内容多，对首次加载速度要求高的应用。</li><li><strong>需要提高用户体验的场景</strong>: 当用户访问的是静态页面时，SSR 可以加速页面的加载速度，给用户提供更好的体验。</li></ol><h3 id="与客户端渲染比较" tabindex="-1">与客户端渲染比较 <a class="header-anchor" href="#与客户端渲染比较" aria-label="Permalink to &quot;与客户端渲染比较&quot;">​</a></h3><ul><li><strong>客户端渲染（CSR）</strong>: 客户端渲染是指将空的 HTML 页面发送到客户端，客户端通过 javascript 动态生成页面内容。初次加载较慢，但交互性强，适合动态变化但内容。</li><li><strong>服务端渲染（SSR）</strong>: 服务端渲染将整个页面但 HTML 直接从服务器发送给浏览器，初次加载速度较快，适合静态页面，SEO 友好，但交互性弱。</li></ul><h3 id="服务端渲染常见的框架和技术" tabindex="-1">服务端渲染常见的框架和技术 <a class="header-anchor" href="#服务端渲染常见的框架和技术" aria-label="Permalink to &quot;服务端渲染常见的框架和技术&quot;">​</a></h3><ol><li><strong>Next.js</strong>: 基于 React 的服务端渲染框架，它支持服务端渲染、静态站点生成、API 路由等功能。</li><li><strong>Nuxt.js</strong>: 基于 Vue 的服务端渲染框架，支持服务端渲染和静态站点生成，易于创建高性能的 Vue 应用。</li><li><strong>Express + React / Vue</strong>: 可以通过自定义配置 Express.js 服务器来实现 React 或 Vue 应用的服务端渲染。</li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>服务端渲染（SSR）是一种在服务端生成完整 HTML 页面技术，主要优势在于快速的页面加载和有利于 SEO，但是它带来了服务器负担和交互性较差的问题。在实际开发中，开发者通常会根据项目需求选择 SSR、CSR 或者两者结合的方案（例如同构应用）来优化性能和用户体验。</p>',17)]))}const S=a(i,[["render",l]]);export{u as __pageData,S as default};
