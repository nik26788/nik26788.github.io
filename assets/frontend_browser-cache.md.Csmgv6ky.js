import{_ as s,c as a,o as t,a1 as e}from"./chunks/framework.CYKEwMIE.js";const o=JSON.parse('{"title":"浏览器缓存机制","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"frontend/browser-cache.md","filePath":"frontend/browser-cache.md"}'),h={name:"frontend/browser-cache.md"};function l(n,i,p,k,r,d){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="浏览器缓存机制" tabindex="-1">浏览器缓存机制 <a class="header-anchor" href="#浏览器缓存机制" aria-label="Permalink to &quot;浏览器缓存机制&quot;">​</a></h1><p>缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。</p><p>所有缓存资源都仅仅针对GET请求，而对POST，DELETE，PUT这类行为操作通常不做任何缓存。</p><h2 id="缓存的作用" tabindex="-1">缓存的作用 <a class="header-anchor" href="#缓存的作用" aria-label="Permalink to &quot;缓存的作用&quot;">​</a></h2><ul><li>减小网络I/O,减小服务器压力</li><li>加快页面访问速度</li><li>减少宽带消耗</li></ul><h2 id="浏览器静态资源请求流程" tabindex="-1">浏览器静态资源请求流程 <a class="header-anchor" href="#浏览器静态资源请求流程" aria-label="Permalink to &quot;浏览器静态资源请求流程&quot;">​</a></h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/28/163083c5c8f0de63~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="浏览器静态资源请求流程"></p><h2 id="资源缓存分类" tabindex="-1">资源缓存分类 <a class="header-anchor" href="#资源缓存分类" aria-label="Permalink to &quot;资源缓存分类&quot;">​</a></h2><p>按照获取资源时请求的优先级依次排序：</p><ul><li>Memory Cache、Disk Cache</li><li>Service Worker Cache</li><li>HTTP Cache</li><li>Push Cache</li></ul><h2 id="http-cache" tabindex="-1">HTTP-Cache <a class="header-anchor" href="#http-cache" aria-label="Permalink to &quot;HTTP-Cache&quot;">​</a></h2><p>HTTP缓存又分为强缓存与协商缓存。强缓存优先级高于协商缓存。在匹配强缓存失败后，才匹配协商缓存。</p><h3 id="新鲜度限值" tabindex="-1">新鲜度限值 <a class="header-anchor" href="#新鲜度限值" aria-label="Permalink to &quot;新鲜度限值&quot;">​</a></h3><p>HTTP通过缓存将服务器资源的副本保留一段时间，这段时间称为新鲜度限值。这在一段时间内请求相同资源不会再通过服务器。HTTP协议中Cache-Control 和 Expires可以用来设置新鲜度的限值。</p><h3 id="服务器再验证" tabindex="-1">服务器再验证 <a class="header-anchor" href="#服务器再验证" aria-label="Permalink to &quot;服务器再验证&quot;">​</a></h3><p>浏览器或代理缓存中缓存的资源过期了，并不意味着它和原始服务器上的资源有实际的差异，仅仅意味着到了要进行核对的时间了。这种情况被称为服务器再验证。</p><ul><li>如果资源发生变化，则需要取得新的资源，并在缓存中替换旧资源。</li><li>如果资源没有发生变化，缓存只需要获取新的响应头，和一个新的过期时间，对缓存中的资源过期时间进行更新即可。</li></ul><h3 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-label="Permalink to &quot;强缓存&quot;">​</a></h3><p>强缓存主要通过Cache-Control和Expires设置。Cache-control是HTTP1.1响应头设置，Expires是HTTP1.0中的响应头设置。</p><p>当匹配强缓存时，会直接从缓存中获得资源，不再与服务端通信。返回HTTP状态码为200。</p><p><img src="https://raw.githubusercontent.com/staven630/blog/master/assets/images/fromdiskcache.png" alt="from-disk-cache"></p><p>Chrome会根据本地内存的使用率来决定缓存存放在哪，如果内存使用率很高，放在磁盘里面，内存的使用率很低会暂时放在内存里面。</p><h5 id="cache-control和expires" tabindex="-1">Cache-Control和Expires <a class="header-anchor" href="#cache-control和expires" aria-label="Permalink to &quot;Cache-Control和Expires&quot;">​</a></h5><p><img src="https://raw.githubusercontent.com/staven630/blog/master/assets/images/cachecontrolexpires.png" alt="cache-control-expires"></p><p>Cache-Control设置的是相对时间，单位为s。Expires设置具体的过期时间（时间戳）。由于客户端与服务端的时间可能存在差异，导致Expires设置可能存在偏差。因此，优先考虑使用Cache-Control。</p><p>目前依然会设置Expires，目的是为了兼容http1.0。</p><h5 id="cache-control属性" tabindex="-1">Cache-Control属性 <a class="header-anchor" href="#cache-control属性" aria-label="Permalink to &quot;Cache-Control属性&quot;">​</a></h5><table tabindex="0"><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">max-age</td><td style="text-align:left;">单位s。设置缓存最大的有效期。在max-age时间段内，浏览器不会再向服务器发送请求</td></tr><tr><td style="text-align:left;">s-maxage</td><td style="text-align:left;">单位s。只在代理服务器中的public资源生效，优先级高于max-age。在s-maxage内，向代理浏览器请求缓存资源。</td></tr><tr><td style="text-align:left;">public</td><td style="text-align:left;">指定资源，既可以被浏览器缓存，也可以被代理服务器缓存</td></tr><tr><td style="text-align:left;">private</td><td style="text-align:left;">只能被浏览器缓存</td></tr><tr><td style="text-align:left;">no-cache</td><td style="text-align:left;">忽略浏览器缓存，匹配协商缓存：与服务器确认资源是否被更改过(依据if-None-Match和Etag)，在决定是否使用本地缓存</td></tr><tr><td style="text-align:left;">no-store</td><td style="text-align:left;">禁止任何缓存，重新向服务器发送请求，下载完整响应</td></tr></tbody></table><h5 id="后端设置" tabindex="-1">后端设置 <a class="header-anchor" href="#后端设置" aria-label="Permalink to &quot;后端设置&quot;">​</a></h5><ul><li>node.js</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>res.setHeader(&#39;Cache-Control&#39;, &#39;public, max-age=&#39; + 864000);</span></span></code></pre></div><h3 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/staven630/blog/master/assets/images/etaglastmodified.png" alt="last-modified"><br> 协商缓存需要向服务器验证缓存的有效性。</p><p>HTTP1.1推荐使用的验证方式是If-None-Match/Etag，在HTTP1.0中则使用If-Modified-Since/Last-Modified。</p><h5 id="etag与if-none-match" tabindex="-1">Etag与if-None-Match <a class="header-anchor" href="#etag与if-none-match" aria-label="Permalink to &quot;Etag与if-None-Match&quot;">​</a></h5><p>ETag值通常由服务器端计算，并在响应客户端请求时将它返回给客户端，验证资源是否已经修改。</p><blockquote><p>Etag值计算</p></blockquote><ul><li>Apache</li></ul><p>默认通过FileEtag中FileEtag INode Mtime Size的配置自动生成ETag。</p><ul><li>Nginx</li></ul><p>默认以“文件最后修改时间16进制-文件长度16进制”设置Etag。</p><ul><li>Express</li></ul><p><a href="https://expressjs.com/en/resources/middleware/serve-static.html" target="_blank" rel="noreferrer">serve-static</a>中间件配置</p><h5 id="if-modified-since与last-modified" tabindex="-1">if-Modified-Since与Last-Modified <a class="header-anchor" href="#if-modified-since与last-modified" aria-label="Permalink to &quot;if-Modified-Since与Last-Modified&quot;">​</a></h5><p>if-Modified-Since与Last-Modified是HTTP1.0中用来验证资源是否过期的请求/响应头，这两个头部都是日期，验证过程与Etag类似。使用这两个头部来验证资源是否更新时，存在以下问题：</p><ul><li>有些文件被重写了，但内容没有更改。重写的文件的修改日期与if-Modified-Since不相同，会被当成新资源，导致不必要的重新请求。</li><li>if-Modified-Since只能那个检查到以秒为最小时间差检测文件的变化，当修改文件过快可能不能及时检测到文件的变化。</li><li>有些文档资源被修改了，但修改内容(比如注释)并不重要，不需要所有的缓存都更新</li></ul><h5 id="后端设置-1" tabindex="-1">后端设置 <a class="header-anchor" href="#后端设置-1" aria-label="Permalink to &quot;后端设置&quot;">​</a></h5><ul><li>node.js</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cache-Control&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;public, max-age=&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 864000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Last-Modified&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xxx);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ETag&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xxx);</span></span></code></pre></div><h3 id="启发式缓存" tabindex="-1">启发式缓存 <a class="header-anchor" href="#启发式缓存" aria-label="Permalink to &quot;启发式缓存&quot;">​</a></h3><p>当响应头中没有设置Etag或者if-Modified-Since，会根据Date和Last-Modified之间的时间差值的10%作为缓存周期。</p><h3 id="html中缓存控制" tabindex="-1">html中缓存控制 <a class="header-anchor" href="#html中缓存控制" aria-label="Permalink to &quot;html中缓存控制&quot;">​</a></h3><ul><li>使用Meta标签设置</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pragma&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache-control&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache, must-revalidate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;expires&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wed, 26 Feb 2017 08:21:57 GMT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><ul><li>微信浏览器中避免html被缓存</li></ul><p>通过设置不存在的manifest。根据HTML5 W3C规范，解析器下载manifest header 404/410时，缓存即失效。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> manifest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;IGNORE.manifest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pragma&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache-control&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache, must-revalidate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;expires&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wed, 26 Feb 2017 08:21:57 GMT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;expires&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h3><ul><li>html：使用协商缓存</li><li>js/css/image：使用强缓存，文件名采用hash值形式</li></ul>`,59)]))}const c=s(h,[["render",l]]);export{o as __pageData,c as default};
